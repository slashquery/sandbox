# ----------------------------------------------------------------------------
# openresty -c ~/projects/slashquery/slashquery/nginx-test.conf
# ----------------------------------------------------------------------------

error_log stderr notice;
daemon off;
events {
    worker_connections  128;
}

http {
    include /usr/local/etc/openresty/mime.types;
    default_type  application/octet-stream;
    log_format  main  '$host | $remote_addr | $remote_user | $bytes_sent | $request | $request_uri | $request_time | $time_local | $status | $http_referer | $http_x_forwarded_for | $http_user_agent | $gzip_ratio | $connection';


    access_log  /tmp/nginx_access.log  main;
#    access_log /dev/stdout main;

    client_body_timeout       60s;
    client_header_timeout     60s;
    client_max_body_size      0;
    underscores_in_headers    on;
    keepalive_timeout         75s;
    reset_timedout_connection on;
    sendfile                  on;
    tcp_nopush                on;

    gzip              on;
    gzip_static       on;
    gzip_vary         on;
    gzip_min_length   0;
    gzip_comp_level   9;
    gzip_buffers      16 8k;
    gzip_http_version 1.0;
    gzip_proxied      any;
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/vnd.ms-fontobject application/x-font-ttf font/opentype image/svg+xml image/x-icon;

    charset   utf-8;
    server_tokens off;
    server_name_in_redirect off;

    lua_package_path 'slashquery/?.lua;;';
    lua_code_cache on;
    lua_socket_pool_size 30;
    lua_max_running_timers 256;
    lua_max_pending_timers 1024;
    lua_shared_dict cache 128m;
    lua_socket_log_errors on;

    init_by_lua_block {
        sq = require 'slashquery'
        sq.init()
    }

    upstream slashquery_upstream {
        server 0.0.0.1; # just an invalid address as a place holder
        balancer_by_lua_block {
            sq.balancer()
        }
        keepalive 60;
    }

    server {
        server_name _;
        listen 8080 default_server;
        error_page 404 408 411 412 413 414 417 /slashquery_error_handler;
        error_page 500 502 503 504 /slashquery_error_handler;

        location = /slashquery_error_handler {
            internal;
            content_by_lua_block {
                require('error_handlers')(ngx)
            }
        }

        location / {
            set $upstream_host nil;

            access_by_lua_block {
                sq.resolver()
                sq.access()
            }

            proxy_http_version 1.1;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Host $upstream_host;

            proxy_pass_header Server;
            proxy_pass http://slashquery_upstream;

            #log_by_lua_block {
                #slashquery.log()
            #}
        }
    }

    server {
        server_name slashquery_admin;
        listen 8181;

        client_max_body_size 10m;
        client_body_buffer_size 10m;

        location / {
            default_type application/json;
            content_by_lua_block {
                ngx.header['Access-Control-Allow-Origin'] = '*'
                    ngx.header['Access-Control-Allow-Credentials'] = 'false'
                    if ngx.req.get_method() == 'OPTIONS' then
                        ngx.header['Access-Control-Allow-Methods'] = 'GET,HEAD,PUT,PATCH,POST,DELETE'
                            ngx.header['Access-Control-Allow-Headers'] = 'Content-Type'
                            ngx.exit(204)
                            end
                            --[[
                            do logic
                            ]]
            }
        }

        location /nginx_status {
            internal;
            access_log off;
            stub_status;
        }

        location /robots.txt {
            return 200 'User-agent: *\nDisallow: /';
        }
    }
}
